{
  "$schema": {
      "desc": "http://json-schema.org/draft-04/schema#"
  },
  "id": {
      "desc": "https://json.schemastore.org/codecov"
  },
  "codecov.url": {
      "desc": "pattern: https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)"
  },
  "codecov.bot": {
      "desc": "nullable: True"
  },
  "codecov.assume_all_flags": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.disable_default_path_fixes": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.require_ci_to_pass": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.allow_coverage_offsets": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.allow_pseudo_compare": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.archive.uploads": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.notify.after_n_builds": {
      "desc": "min: 0"
  },
  "codecov.notify.wait_for_ci": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.notify.require_ci_to_pass": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.ui.hide_contexual": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.ui.hide_sunburst": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "codecov.ui.hide_search": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "coverage.precision": {
      "desc": "min: 0"
  },
  "coverage.precision.max": {
      "desc": 99
  },
  "coverage.round": {
      "desc": " down,  up,  nearest"
  },
  "coverage.range": {
      "desc": "maxlength: 2"
  },
  "coverage.notify.irc.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.irc.valuesrules.password": {
      "desc": "nullable: True"
  },
  "coverage.notify.irc.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.irc.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.irc.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.irc.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.irc.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.irc.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.notify.slack.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.slack.valuesrules.attachments.comma_separated_strings": {
      "desc": true
  },
  "coverage.notify.slack.valuesrules.attachments": {
      "desc": "nullable: True"
  },
  "coverage.notify.slack.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.slack.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.slack.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.slack.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.slack.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.slack.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.notify.gitter.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.gitter.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.gitter.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.gitter.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.gitter.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.gitter.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.gitter.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.notify.hipchat.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.hipchat.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.hipchat.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.hipchat.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.hipchat.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.hipchat.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.hipchat.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.notify.webhook.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.webhook.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.webhook.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.webhook.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.webhook.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.webhook.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.webhook.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.notify.email.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.notify.email.valuesrules.layout.comma_separated_strings": {
      "desc": true
  },
  "coverage.notify.email.valuesrules.layout": {
      "desc": "nullable: True"
  },
  "coverage.notify.email.valuesrules.url": {
      "desc": "nullable: True"
  },
  "coverage.notify.email.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.notify.email.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.notify.email.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.notify.email.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.notify.email.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.status.default_rules.flag_coverage_not_uploaded_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.default_rules.carryforward_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.project.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.status.project.valuesrules": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.target.anyof.0.allowed.0": {
      "desc": "auto"
  },
  "coverage.status.project.valuesrules.target.anyof.1.regex": {
      "desc": "(\\d+)(\\.\\d+)?%?"
  },
  "coverage.status.project.valuesrules.target": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.include_changes.anyof.0.allowed.0": {
      "desc": "auto"
  },
  "coverage.status.project.valuesrules.include_changes.anyof.1.regex": {
      "desc": "(\\d+)(\\.\\d+)?%?"
  },
  "coverage.status.project.valuesrules.include_changes": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.status.project.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.status.project.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.if_ci_failed": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.project.valuesrules.if_no_uploads": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.project.valuesrules.if_not_found": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.project.valuesrules.measurement": {
      "desc": " line,  statement,  branch,  method,  complexity"
  },
  "coverage.status.project.valuesrules.removed_code_behavior": {
      "desc": " removals_only,  adjust_base,  fully_covered_patch,  off,  False"
  },
  "coverage.status.project.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.status.project.valuesrules.carryforward_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.project.valuesrules.flag_coverage_not_uploaded_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.patch.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.status.patch.valuesrules": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.target.anyof.0.allowed.0": {
      "desc": "auto"
  },
  "coverage.status.patch.valuesrules.target.anyof.1.regex": {
      "desc": "(\\d+)(\\.\\d+)?%?"
  },
  "coverage.status.patch.valuesrules.target": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.include_changes.anyof.0.allowed.0": {
      "desc": "auto"
  },
  "coverage.status.patch.valuesrules.include_changes.anyof.1.regex": {
      "desc": "(\\d+)(\\.\\d+)?%?"
  },
  "coverage.status.patch.valuesrules.include_changes": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.threshold": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.status.patch.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.status.patch.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.if_ci_failed": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.patch.valuesrules.if_no_uploads": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.patch.valuesrules.if_not_found": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.patch.valuesrules.measurement": {
      "desc": " line,  statement,  branch,  method,  complexity"
  },
  "coverage.status.patch.valuesrules.removed_code_behavior": {
      "desc": " removals_only,  adjust_base,  fully_covered_patch,  off,  False"
  },
  "coverage.status.patch.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.status.patch.valuesrules.carryforward_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.patch.valuesrules.flag_coverage_not_uploaded_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.changes.keysrules": {
      "desc": "pattern: ^[\\w\\-\\.]+$"
  },
  "coverage.status.changes.valuesrules": {
      "desc": "nullable: True"
  },
  "coverage.status.changes.valuesrules.flags": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "coverage.status.changes.valuesrules.base": {
      "desc": " parent,  pr,  auto"
  },
  "coverage.status.changes.valuesrules.branches": {
      "desc": "nullable: True"
  },
  "coverage.status.changes.valuesrules.if_ci_failed": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.changes.valuesrules.if_no_uploads": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.changes.valuesrules.if_not_found": {
      "desc": " success,  failure,  error,  ignore"
  },
  "coverage.status.changes.valuesrules.measurement": {
      "desc": " line,  statement,  branch,  method,  complexity"
  },
  "coverage.status.changes.valuesrules.removed_code_behavior": {
      "desc": " removals_only,  adjust_base,  fully_covered_patch,  off,  False"
  },
  "coverage.status.changes.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "coverage.status.changes.valuesrules.carryforward_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.changes.valuesrules.flag_coverage_not_uploaded_behavior": {
      "desc": " include,  exclude,  pass"
  },
  "coverage.status.no_upload_behavior": {
      "desc": " pass,  fail"
  },
  "parsers.go.partials_as_hits": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.javascript.enable_partials": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.v1.include_full_missed_files": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.gcov.branch_detection.conditional": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.gcov.branch_detection.loop": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.gcov.branch_detection.method": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.gcov.branch_detection.macro": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "parsers.jacoco.partials_as_hits": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "ignore": {
      "desc": "nullable: True"
  },
  "flags.keysrules": {
      "desc": "minlength: 1, maxlength: 45, pattern: ^[\\w\\.\\-]+$"
  },
  "flags.valuesrules.carryforward_mode": {
      "desc": " all,  labels"
  },
  "flags.valuesrules.ignore": {
      "desc": "nullable: True"
  },
  "flags.valuesrules.paths": {
      "desc": "nullable: True"
  },
  "flags.valuesrules.assume.branches": {
      "desc": "nullable: True"
  },
  "flags.valuesrules.after_n_builds": {
      "desc": "min: 0"
  },
  "flag_management.default_rules.carryforward_mode": {
      "desc": " all,  labels"
  },
  "flag_management.default_rules.carryforward": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "flag_management.default_rules.paths": {
      "desc": "nullable: True"
  },
  "flag_management.default_rules.ignore": {
      "desc": "nullable: True"
  },
  "flag_management.default_rules.after_n_builds": {
      "desc": "min: 0"
  },
  "component_management.default_rules.paths": {
      "desc": "nullable: True"
  },
  "comment.layout.comma_separated_strings": {
      "desc": true
  },
  "comment.layout": {
      "desc": "nullable: True"
  },
  "comment.require_changes": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "comment.require_base": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "comment.require_head": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "comment.show_critical_paths": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "comment.branches": {
      "desc": "nullable: True"
  },
  "comment.branches.items": {
      "desc": "nullable: True"
  },
  "comment.paths": {
      "desc": "nullable: True"
  },
  "comment.flags": {
      "desc": "nullable: True"
  },
  "comment.flags.items": {
      "desc": "pattern: ^[\\w\\.\\-]{1,45}$"
  },
  "comment.behavior": {
      "desc": " default,  once,  new,  spammy"
  },
  "comment.after_n_builds": {
      "desc": "min: 0"
  },
  "comment.show_carryforward_flags": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "comment.hide_comment_details": {
      "desc": " True,  False,  yes,  no,  on,  off"
  },
  "github_checks.annotations": {
      "desc": " True,  False,  yes,  no,  on,  off"
  }
}